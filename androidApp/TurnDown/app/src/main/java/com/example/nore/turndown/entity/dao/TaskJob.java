package com.example.nore.turndown.entity.dao;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TASK_JOB.
 */
public class TaskJob implements Serializable{

    private Long id;
    private String descripcion;
    private java.util.Date date;
    private long jobId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskJobDao myDao;

    private Job job;
    private Long job__resolvedKey;


    public TaskJob() {
    }

    public TaskJob(Long id) {
        this.id = id;
    }

    public TaskJob(Long id, String descripcion, java.util.Date date, long jobId) {
        this.id = id;
        this.descripcion = descripcion;
        this.date = date;
        this.jobId = jobId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskJobDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getJobId() {
        return jobId;
    }

    public void setJobId(long jobId) {
        this.jobId = jobId;
    }

    /** To-one relationship, resolved on first access. */
    public Job getJob() {
        long __key = this.jobId;
        if (job__resolvedKey == null || !job__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            Job jobNew = targetDao.load(__key);
            synchronized (this) {
                job = jobNew;
            	job__resolvedKey = __key;
            }
        }
        return job;
    }

    public void setJob(Job job) {
        if (job == null) {
            throw new DaoException("To-one property 'jobId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.job = job;
            jobId = job.getId();
            job__resolvedKey = jobId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
