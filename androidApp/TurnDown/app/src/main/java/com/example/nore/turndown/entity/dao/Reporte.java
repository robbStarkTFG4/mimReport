package com.example.nore.turndown.entity.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table REPORTE.
 */
public class Reporte {

    private Long id;
    /**
     * Not-null value.
     */
    private String trabajo;
    /**
     * Not-null value.
     */
    private String sitio;
    private Integer status;
    private java.util.Date date;
    private long userId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient ReporteDao myDao;

    private Usuario usuario;
    private Long usuario__resolvedKey;

    private List<Job> jobs;

    public Reporte() {
    }

    public Reporte(Long id) {
        this.id = id;
    }

    public Reporte(Long id, String trabajo, String sitio, Integer status, java.util.Date date, long userId) {
        this.id = id;
        this.trabajo = trabajo;
        this.sitio = sitio;
        this.status = status;
        this.date = date;
        this.userId = userId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReporteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Not-null value.
     */
    public String getTrabajo() {
        return trabajo;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setTrabajo(String trabajo) {
        this.trabajo = trabajo;
    }

    /**
     * Not-null value.
     */
    public String getSitio() {
        return sitio;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setSitio(String sitio) {
        this.sitio = sitio;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Usuario getUsuario() {
        long __key = this.userId;
        if (usuario__resolvedKey == null || !usuario__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsuarioDao targetDao = daoSession.getUsuarioDao();
            Usuario usuarioNew = targetDao.load(__key);
            synchronized (this) {
                usuario = usuarioNew;
                usuario__resolvedKey = __key;
            }
        }
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        if (usuario == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.usuario = usuario;
            userId = usuario.getId();
            usuario__resolvedKey = userId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Job> getJobs() {
        if (jobs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            List<Job> jobsNew = targetDao._queryReporte_Jobs(id);
            synchronized (this) {
                if (jobs == null) {
                    jobs = jobsNew;
                }
            }
        }
        return jobs;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetJobs() {
        jobs = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    public Usuario getUsuario2() {
        return usuario;
    }

    public List<Job> getJobs2() {
        return jobs;
    }

    public void setUsuario2(Usuario usuario) {
        this.usuario = usuario;
    }

    public void setJobsList(List<Job> list) {
        this.jobs = list;
    }
}
