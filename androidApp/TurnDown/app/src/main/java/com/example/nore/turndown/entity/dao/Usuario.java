package com.example.nore.turndown.entity.dao;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USUARIO.
 */
public class Usuario {

    private Long id;
    /** Not-null value. */
    private String nombre;
    /** Not-null value. */
    private String apellido;
    /** Not-null value. */
    private String usuario;
    /** Not-null value. */
    private String contraseña;
    private Boolean activeUser;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UsuarioDao myDao;

    private List<Reporte> reportes;

    public Usuario() {
    }

    public Usuario(Long id) {
        this.id = id;
    }

    public Usuario(Long id, String nombre, String apellido, String usuario, String contraseña, Boolean activeUser) {
        this.id = id;
        this.nombre = nombre;
        this.apellido = apellido;
        this.usuario = usuario;
        this.contraseña = contraseña;
        this.activeUser = activeUser;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsuarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    /** Not-null value. */
    public String getApellido() {
        return apellido;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    /** Not-null value. */
    public String getUsuario() {
        return usuario;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    /** Not-null value. */
    public String getContraseña() {
        return contraseña;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContraseña(String contraseña) {
        this.contraseña = contraseña;
    }

    public Boolean getActiveUser() {
        return activeUser;
    }

    public void setActiveUser(Boolean activeUser) {
        this.activeUser = activeUser;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Reporte> getReportes() {
        if (reportes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReporteDao targetDao = daoSession.getReporteDao();
            List<Reporte> reportesNew = targetDao._queryUsuario_Reportes(id);
            synchronized (this) {
                if(reportes == null) {
                    reportes = reportesNew;
                }
            }
        }
        return reportes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReportes() {
        reportes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
