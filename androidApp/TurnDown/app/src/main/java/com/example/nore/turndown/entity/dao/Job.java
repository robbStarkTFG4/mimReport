package com.example.nore.turndown.entity.dao;

import java.io.Serializable;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table JOB.
 */
public class Job implements Serializable {

    private Long id;
    private String job;
    private java.util.Date date;
    private long reportId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient JobDao myDao;

    private Reporte reporte;
    private Long reporte__resolvedKey;

    private List<ImageInfo> ImageInfo;
    private List<TaskJob> tasks;

    public Job() {
    }

    public Job(Long id) {
        this.id = id;
    }

    public Job(Long id, String job, java.util.Date date, long reportId) {
        this.id = id;
        this.job = job;
        this.date = date;
        this.reportId = reportId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getJobDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getJob() {
        return job;
    }

    public void setJob(String job) {
        this.job = job;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getReportId() {
        return reportId;
    }

    public void setReportId(long reportId) {
        this.reportId = reportId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Reporte getReporte() {
        long __key = this.reportId;
        if (reporte__resolvedKey == null || !reporte__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReporteDao targetDao = daoSession.getReporteDao();
            Reporte reporteNew = targetDao.load(__key);
            synchronized (this) {
                reporte = reporteNew;
                reporte__resolvedKey = __key;
            }
        }
        return reporte;
    }

    public void setReporte(Reporte reporte) {
        if (reporte == null) {
            throw new DaoException("To-one property 'reportId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.reporte = reporte;
            reportId = reporte.getId();
            reporte__resolvedKey = reportId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<ImageInfo> getImageInfo() {
        if (ImageInfo == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageInfoDao targetDao = daoSession.getImageInfoDao();
            List<ImageInfo> ImageInfoNew = targetDao._queryJob_ImageInfo(id);
            synchronized (this) {
                if (ImageInfo == null) {
                    ImageInfo = ImageInfoNew;
                }
            }
        }
        return ImageInfo;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetImageInfo() {
        ImageInfo = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<TaskJob> getTasks() {
        if (tasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskJobDao targetDao = daoSession.getTaskJobDao();
            List<TaskJob> tasksNew = targetDao._queryJob_Tasks(id);
            synchronized (this) {
                if (tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetTasks() {
        tasks = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    public List<ImageInfo> getImageInfo2() {
        return ImageInfo;
    }

    public void setImageInfo(List<ImageInfo> list) {
        this.ImageInfo = list;
    }

    public List<TaskJob> getTasks2() {
        return tasks;
    }

    public void setTasks(List<TaskJob> taskList) {
        this.tasks = taskList;
    }
}
